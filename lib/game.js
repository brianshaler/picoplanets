// Generated by CoffeeScript 1.3.1
(function() {
  var Galaxy, KEY_DOWN, KEY_LEFT, KEY_RIGHT, KEY_SPACE, KEY_UP, Planet, Player, galaxy, h, key_dir, planets, player, rotation, setPixel, w;

  Planet = (function() {

    Planet.name = 'Planet';

    function Planet(x, y, radius) {
      this.x = x;
      this.y = y;
      this.radius = radius;
    }

    Planet.prototype.draw = function(s, g) {
      var angle, dist, size, x, y;
      this.s = s;
      this.g = g;
      x = this.x - this.g.offsetX;
      y = this.y - this.g.offsetY;
      angle = Math.atan2(x, y);
      dist = Math.sqrt((Math.pow(x, 2)) + (Math.pow(y, 2)));
      angle += this.g.rotation;
      x = Math.cos(angle) * dist;
      y = Math.sin(angle) * dist;
      x += this.g.w / 2;
      y += this.g.h / 2;
      size = this.radius * 2;
      this.s.noStroke();
      this.s.fill(255);
      return this.s.ellipse(x, y, size, size);
    };

    return Planet;

  })();

  /* @pjs preload="images/standing.png"; */;


  /* @pjs preload="images/walking.png"; */;


  /* @pjs preload="images/squatting.png"; */;


  /* @pjs preload="images/flying.png"; */;


  Player = (function() {

    Player.name = 'Player';

    function Player() {
      var cb,
        _this = this;
      this.currentImage = this.IMG_STANDING;
      this.walkingImage = this.IMG_WALKING;
      cb = function() {
        return _this.switchWalk();
      };
      setInterval(cb, 200);
    }

    Player.prototype.x = 0;

    Player.prototype.y = 0;

    Player.prototype.width = 20;

    Player.prototype.height = 25;

    Player.prototype.velocityX = 0;

    Player.prototype.velocityY = 0;

    Player.prototype.nearestPlanet = false;

    Player.prototype.jumping = false;

    Player.prototype.jumpVelocity = 0;

    Player.prototype.maxJump = 40;

    Player.prototype.minJump = 10;

    Player.prototype.maxSpeed = 20;

    Player.prototype.onGround = false;

    Player.prototype.IMG_STANDING = "standing";

    Player.prototype.IMG_WALKING = "walking";

    Player.prototype.IMG_SQUATTING = "squatting";

    Player.prototype.IMG_FLYING = "flying";

    Player.prototype.walkingImage = "";

    Player.prototype.currentImage = "";

    Player.prototype.lastImageChange = 0;

    Player.prototype.accel = function(angle, force, cap) {
      this.velocityX += (Math.cos(angle)) * force;
      this.velocityY += (Math.sin(angle)) * force;
      if (cap && Math.sqrt((Math.pow(this.velocityX, 2)) + (Math.pow(this.velocityY, 2)) > this.maxSpeed)) {
        angle = Math.PI / 2 - Math.atan2(this.velocityX, this.velocityY);
        this.velocityX = (Math.cos(angle)) * this.maxSpeed;
        return this.velocityY = (Math.sin(angle)) * this.maxSpeed;
      }
    };

    Player.prototype.calculatePhysics = function(planets) {
      var planet, _fn, _i, _len,
        _this = this;
      this.onGround = false;
      _fn = function(planet) {
        var angle, dist, pull;
        dist = _this.distanceTo(planet);
        if (dist < planet.radius * 3) {
          if (dist > 0) {
            _this.velocityX *= .99;
            _this.velocityY *= .99;
            pull = Math.sqrt((1 - (dist / (planet.radius * 3))) * (planet.radius + 100) * .05);
            angle = Math.PI / 2 - Math.atan2(planet.x - _this.x, planet.y - _this.y);
            _this.velocityX += (Math.cos(angle)) * pull;
            _this.velocityY += (Math.sin(angle)) * pull;
            dist = _this.distanceTo(planet);
          }
          if (dist <= 0) {
            angle = Math.PI / 2 - Math.atan2(planet.x - _this.x, planet.y - _this.y);
            _this.x = planet.x - (Math.cos(angle)) * planet.radius;
            _this.y = planet.y - (Math.sin(angle)) * planet.radius;
            _this.velocityX = 0;
            _this.velocityY = 0;
          }
          if (dist < 10) {
            _this.onGround = true;
            _this.velocityX *= .99;
            return _this.velocityY *= .99;
          }
        }
      };
      for (_i = 0, _len = planets.length; _i < _len; _i++) {
        planet = planets[_i];
        _fn(planet);
      }
      return this;
    };

    Player.prototype.move = function() {
      var d, t;
      this.x += this.velocityX;
      this.y += this.velocityY;
      d = new Date();
      t = d.getTime();
      if (this.onGround && !this.jumping) {
        if (Math.abs(this.velocityX) + Math.abs(this.velocityY) > 0.1) {
          this.currentImage = this.walkingImage;
        } else {
          this.currentImage = this.IMG_STANDING;
        }
      } else {
        if (this.jumping) {
          this.currentImage = this.IMG_SQUATTING;
        } else {
          this.currentImage = this.IMG_FLYING;
        }
      }
      return this;
    };

    Player.prototype.switchWalk = function() {
      if (this.walkingImage !== this.IMG_WALKING) {
        return this.walkingImage = this.IMG_WALKING;
      } else {
        return this.walkingImage = this.IMG_STANDING;
      }
    };

    Player.prototype.findNearestPlanet = function(planets, log) {
      var nearestDistance, planet, _fn, _i, _len,
        _this = this;
      this.nearestPlanet = planets[0];
      nearestDistance = this.distanceTo(this.nearestPlanet);
      _fn = function(planet) {
        var dist;
        dist = _this.distanceTo(planet);
        if (dist < nearestDistance) {
          _this.nearestPlanet = planet;
          return nearestDistance = dist;
        } else {

        }
      };
      for (_i = 0, _len = planets.length; _i < _len; _i++) {
        planet = planets[_i];
        _fn(planet);
      }
      return this.nearestPlanet;
    };

    Player.prototype.startJumping = function() {
      var cb,
        _this = this;
      this.jumping = true;
      this.jumpVelocity = this.minJump;
      cb = function() {
        _this.jumpVelocity = _this.jumpVelocity + 1 < _this.maxJump ? _this.jumpVelocity + 1 : _this.maxJump;
        if (_this.jumping) {
          return setTimeout(cb, 30);
        }
      };
      return cb();
    };

    Player.prototype.jump = function() {
      this.accel(window.rotation - Math.PI, this.jumpVelocity);
      this.jumping = false;
      return this.jumpVelocity = this.minJump;
    };

    Player.prototype.draw = function(s, g) {
      var angle, dist, x, y;
      this.s = s;
      this.g = g;
      x = this.x - this.g.offsetX;
      y = this.y - this.g.offsetY;
      angle = Math.atan2(x, y);
      dist = Math.sqrt((Math.pow(x, 2)) + (Math.pow(y, 2)));
      angle += this.g.rotation;
      x = (Math.cos(angle)) * dist;
      y = (Math.sin(angle)) * dist;
      x += this.g.w / 2;
      y += this.g.h / 2;
      return this.s.image(this.s[this.currentImage], x - this.width - 2, y - this.height);
    };

    Player.prototype.distanceTo = function(planet) {
      return (Math.sqrt((Math.pow(planet.x - this.x, 2)) + (Math.pow(planet.y - this.y, 2)))) - planet.radius;
    };

    return Player;

  })();

  Galaxy = (function() {

    Galaxy.name = 'Galaxy';

    Galaxy.prototype.planets = [];

    Galaxy.prototype.offsetX = 0;

    Galaxy.prototype.offsetY = 0;

    Galaxy.prototype.w = 100;

    Galaxy.prototype.h = 100;

    Galaxy.prototype.rotation = 0;

    Galaxy.prototype.stars = false;

    function Galaxy(w, h, player, planets) {
      this.w = w;
      this.h = h;
      this.player = player;
      this.planets = planets;
    }

    Galaxy.prototype.draw = function(sketch) {
      var planet, _i, _len, _ref;
      this.sketch = sketch;
      this.drawStars();
      _ref = this.planets;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        planet = _ref[_i];
        this.drawPlanet(planet);
      }
      return this.player.draw(this.sketch, this, this.rotation);
    };

    Galaxy.prototype.drawPlanet = function(planet) {
      return planet.draw(this.sketch, this, this.rotation);
    };

    Galaxy.prototype.drawStars = function() {
      this.sketch.translate(this.w / 2, this.h / 2);
      this.sketch.rotate(this.rotation);
      this.sketch.image(this.sketch.stars, -500, -500);
      this.sketch.rotate(-this.rotation);
      return this.sketch.translate(-this.w / 2, -this.h / 2);
    };

    return Galaxy;

  })();

  w = 800;

  h = 480;

  rotation = 0;

  planets = [];

  planets.push(new Planet(0, 0, 100));

  planets.push(new Planet(200, -300, 60));

  planets.push(new Planet(-100, -350, 60));

  planets.push(new Planet(300, -600, 70));

  planets.push(new Planet(100, -1000, 100));

  player = new Player();

  player.y = -300;

  galaxy = new Galaxy(w, h, player, planets);

  window.player = player;

  window.galaxy = galaxy;

  KEY_UP = 38;

  KEY_DOWN = 40;

  KEY_LEFT = 37;

  KEY_RIGHT = 39;

  KEY_SPACE = 32;

  key_dir = -1;

  document.onkeyup = function(e) {
    if (key_dir === KEY_SPACE) {
      player.jump();
    }
    return key_dir = -1;
  };

  document.onkeydown = function(e) {
    var cont;
    cont = false;
    switch (e.keyCode) {
      case KEY_UP:
        if (key_dir !== KEY_UP && 1 === 2) {
          key_dir = KEY_UP;
          player.accel(window.rotation - Math.PI, 10);
        }
        break;
      case KEY_DOWN:
        if (key_dir !== KEY_DOWN && 1 === 2) {
          key_dir = KEY_DOWN;
          player.accel(window.rotation, 10);
        }
        break;
      case KEY_LEFT:
        if (key_dir !== KEY_LEFT && player.onGround) {
          player.accel(window.rotation - Math.PI / 2, 3, true);
        }
        break;
      case KEY_RIGHT:
        if (key_dir !== KEY_RIGHT && player.onGround) {
          player.accel(window.rotation + Math.PI / 2, 3, true);
        }
        break;
      case KEY_SPACE:
        if (key_dir !== KEY_SPACE && player.onGround) {
          key_dir = KEY_SPACE;
          player.startJumping();
        }
        break;
      default:
        cont = true;
    }
    if (!cont) {
      return e.preventDefault();
    }
  };

  setPixel = function(s, pixels, i) {
    pixels.setPixel(i, s.color(0));
    if (Math.random() * 1000 < 2) {
      return pixels.setPixel(i, s.color(255, 255, 255));
    }
  };

  sketch(function() {
    var _this = this;
    this.setup = function() {
      var i, p, pixel, _i, _len;
      _this.size(w, h);
      _this.background(0);
      _this.noFill();
      _this.frameRate(30);
      _this.standing = _this.loadImage("images/" + player.IMG_STANDING + ".png");
      _this.walking = _this.loadImage("images/" + player.IMG_WALKING + ".png");
      _this.squatting = _this.loadImage("images/" + player.IMG_SQUATTING + ".png");
      _this.flying = _this.loadImage("images/" + player.IMG_FLYING + ".png");
      _this.stars = _this.createImage(1000, 1000, _this.ARGB);
      p = _this.stars.pixels.toArray();
      for (i = _i = 0, _len = p.length; _i < _len; i = ++_i) {
        pixel = p[i];
        setPixel(_this, _this.stars.pixels, i);
      }
      _this.stars.updatePixels();
      return _this;
    };
    return this.draw = function() {
      var diff, idealRotation, nearestPlanet;
      _this.background(0);
      nearestPlanet = player.findNearestPlanet(galaxy.planets, false);
      window.nearestPlanet = nearestPlanet;
      idealRotation = Math.PI / 2 - Math.atan2(nearestPlanet.x - player.x, nearestPlanet.y - player.y);
      diff = Math.abs(idealRotation - rotation);
      if ((Math.abs(idealRotation - Math.PI * 2 - rotation)) < diff) {
        idealRotation = idealRotation - Math.PI * 2;
      }
      if ((Math.abs(idealRotation + Math.PI * 2 - rotation)) < diff) {
        idealRotation = idealRotation + Math.PI * 2;
      }
      rotation += (idealRotation - rotation) * .1;
      if (rotation < 0) {
        rotation += Math.PI * 2;
      }
      rotation = rotation % (Math.PI * 2);
      window.rotation = rotation;
      galaxy.rotation = rotation;
      galaxy.offsetX += (player.x - galaxy.offsetX) * .3;
      galaxy.offsetY += (player.y - galaxy.offsetY) * .3;
      player.move().calculatePhysics(galaxy.planets);
      return galaxy.draw(_this);
    };
  });

}).call(this);

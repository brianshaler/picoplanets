// Generated by CoffeeScript 1.3.1
(function() {
  var Planet, Player;

  Planet = (function() {

    Planet.name = 'Planet';

    Planet.prototype.planetColor = "rgb(210, 210, 210)";

    Planet.prototype.goalColor = "rgb(110, 200, 130)";

    Planet.prototype.sunColor = "rgb(255, 200, 50)";

    Planet.prototype.selectorColor = "#AAEEFF";

    Planet.prototype.selectorPadding = 6;

    Planet.prototype.hitAreaPadding = 10;

    Planet.prototype.maxRadius = 120;

    function Planet(editor, paper, x, y, radius) {
      this.editor = editor;
      this.paper = paper;
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.goal = false;
      this.type = "planet";
      this.selected = false;
      this.color = [200, 200, 200];
      this.stageX = 0;
      this.stageY = 0;
      this.planet = this.paper.circle(0, 0, this.radius);
      this.planet.attr("stroke", "none").attr("fill", this.planetColor);
      this.selector = this.paper.circle(0, 0, this.radius + this.selectorPadding);
      this.selector.attr("stroke", this.selectorColor).attr("stroke-width", 2);
      this.button = this.paper.circle(0, 0, this.radius + this.hitAreaPadding);
      this.button.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.moveHandler, this.startMoving, this.stopMoving, this, this, this);
      this.resizer = this.paper.circle(0, 0, 4);
      this.resizer.attr("stroke", this.selectorColor).attr("stroke-width", 2).attr("fill", "#000");
      this.resizeButton = this.paper.circle(0, 0, 10);
      this.resizeButton.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.resizeHandler, this.startResizing, this.stopResizing, this, this, this);
      this.draw();
    }

    Planet.prototype.makeSun = function() {
      this.planet.attr("fill", this.sunColor);
      this.type = "sun";
      return this;
    };

    Planet.prototype.makeGoal = function() {
      this.planet.attr("fill", this.goalColor);
      this.goal = true;
      return this;
    };

    Planet.prototype.draw = function() {
      var r, _x, _y;
      if (this.selected) {
        this.selector.show();
        this.resizer.show();
        this.resizeButton.show();
      } else {
        this.selector.hide();
        this.resizer.hide();
        this.resizeButton.hide();
      }
      _x = this.stageX + this.x * this.editor.scale;
      _y = this.stageY + this.y * this.editor.scale;
      r = this.radius * this.editor.scale;
      this.planet.attr({
        cx: _x,
        cy: _y,
        r: r
      });
      this.selector.attr({
        cx: _x,
        cy: _y,
        r: r + this.selectorPadding
      });
      this.button.attr({
        cx: _x,
        cy: _y,
        r: r + this.hitAreaPadding
      });
      this.resizer.attr({
        cx: _x + r + this.selectorPadding,
        cy: _y
      });
      this.resizeButton.attr({
        cx: _x + r + this.selectorPadding,
        cy: _y
      });
      return this;
    };

    Planet.prototype.startMoving = function(x, y, e) {
      this.startTime = (new Date()).getTime();
      if (!this.selected) {
        this.editor.deselectAll();
        this.selected = true;
        this.startTime -= 99999;
      }
      this.startX = this.planet.attr("cx") / this.editor.scale - this.stageX * this.editor.scale;
      this.startY = this.planet.attr("cy") / this.editor.scale - this.stageY * this.editor.scale;
      this.dragDistance = 0;
      return this.draw();
    };

    Planet.prototype.stopMoving = function() {
      /*
      		console.log "stopDragging()"
      */

      var dragTime;
      dragTime = (new Date()).getTime() - this.startTime;
      if (this.dragDistance < 4 && dragTime < 1000) {
        this.selected = false;
      }
      return this.editor.redrawAll();
    };

    Planet.prototype.moveHandler = function(dx, dy, x, y, e) {
      this.x = this.startX + dx / this.editor.scale;
      this.y = this.startY + dy / this.editor.scale;
      return this.draw();
    };

    Planet.prototype.startResizing = function() {
      /*
      		console.log "startDragging()"
      */

    };

    Planet.prototype.stopResizing = function() {
      /*
      		console.log "stopDragging()"
      */
      return this.editor.redrawAll();
    };

    Planet.prototype.resizeHandler = function(dx, dy, x, y, e) {
      var _x, _y;
      _x = this.planet.attr("cx");
      _y = this.planet.attr("cy");
      this.radius = (Math.round((Math.sqrt((Math.pow(x - _x, 2)) + (Math.pow(y - _y, 2)))) - this.selectorPadding * 2)) / this.editor.scale;
      this.radius = this.radius < this.maxRadius ? this.radius : this.maxRadius;
      return this.draw();
    };

    Planet.prototype.output = function() {
      var obj;
      return obj = {
        type: this.type,
        x: this.x,
        y: this.y,
        radius: this.radius
      };
    };

    return Planet;

  })();

  Player = (function() {

    Player.name = 'Player';

    Player.prototype.img = "images/spiff/standing_left.png";

    Player.prototype.selectorColor = "#AAEEFF";

    Player.prototype.selectorRadius = 24;

    Player.prototype.iconWidth = 20;

    Player.prototype.iconHeight = 25;

    function Player(editor, paper, x, y) {
      this.editor = editor;
      this.paper = paper;
      this.x = x;
      this.y = y;
      this.selected = false;
      this.stageX = 0;
      this.stageY = 0;
      this.player = this.paper.image(this.img, 0, 0, this.iconWidth * this.editor.scale, this.iconHeight * this.editor.scale);
      this.selector = this.paper.circle(0, 0, this.selectorRadius * this.editor.scale);
      this.selector.attr("stroke", this.selectorColor).attr("stroke-width", 2);
      this.selectorDot = this.paper.circle(0, 0, 2);
      this.selectorDot.attr("stroke", "none").attr("fill", this.selectorColor);
      this.button = this.paper.circle(0, 0, this.selectorRadius * this.editor.scale);
      this.button.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.moveHandler, this.startMoving, this.stopMoving, this, this, this);
      this.draw();
    }

    Player.prototype.draw = function() {
      var _x, _y;
      if (this.selected) {
        this.selector.show();
        this.selectorDot.show();
      } else {
        this.selector.hide();
        this.selectorDot.hide();
      }
      _x = this.stageX + this.x * this.editor.scale;
      _y = this.stageY + this.y * this.editor.scale;
      this.player.attr({
        x: _x - this.iconWidth / 2 * this.editor.scale,
        y: _y - this.iconHeight * this.editor.scale
      });
      this.selector.attr({
        cx: _x,
        cy: _y
      });
      this.selectorDot.attr({
        cx: _x,
        cy: _y
      });
      this.button.attr({
        cx: _x,
        cy: _y
      });
      return this;
    };

    Player.prototype.toFront = function() {
      this.player.toFront();
      this.selector.toFront();
      this.selectorDot.toFront();
      return this.button.toFront();
    };

    Player.prototype.startMoving = function(x, y, e) {
      this.startTime = (new Date()).getTime();
      if (!this.selected) {
        this.editor.deselectAll();
        this.selected = true;
        this.startTime -= 99999;
      }
      this.startX = this.selector.attr("cx") / this.editor.scale - this.stageX * this.editor.scale;
      this.startY = this.selector.attr("cy") / this.editor.scale - this.stageY * this.editor.scale;
      this.dragDistance = 0;
      return this.draw();
    };

    Player.prototype.stopMoving = function() {
      /*
      		console.log "stopDragging()"
      */

      var dragTime;
      dragTime = (new Date()).getTime() - this.startTime;
      if (this.dragDistance < 4 && dragTime < 1000) {
        this.selected = false;
      }
      return this.editor.redrawAll();
    };

    Player.prototype.moveHandler = function(dx, dy, x, y, e) {
      this.dragDistance += (Math.abs(dx)) + (Math.abs(dy));
      this.x = this.startX + dx / this.editor.scale;
      this.y = this.startY + dy / this.editor.scale;
      return this.draw();
    };

    return Player;

  })();

  this.Editor = (function() {

    Editor.name = 'Editor';

    Editor.prototype.w = 800;

    Editor.prototype.h = 480;

    Editor.prototype.cx = 400;

    Editor.prototype.cy = 240;

    Editor.prototype.stageX = 0;

    Editor.prototype.stageY = 0;

    Editor.prototype.dragStartX = 0;

    Editor.prototype.dragStartY = 0;

    Editor.prototype.scale = 0.5;

    function Editor(div_id) {
      this.output = document.getElementById("output");
      this.paper = new Raphael(div_id, this.w, this.h);
      this.paper.bg = this.paper.rect(0, 0, this.w, this.h);
      this.paper.bg.attr("fill", "#000");
      this.paper.bg.drag(this.dragStage, this.startDraggingStage, this.stopDraggingStage, this, this, this);
      this.planets = [];
      this.cx = this.w / 2 / this.scale;
      this.cy = this.h / 2 / this.scale;
      this.player = new Player(this, this.paper, this.cx, this.cy);
      this.addMass({
        x: this.cx,
        y: this.cy - 200,
        radius: 70
      }).makeGoal();
      this.addMass({
        x: this.cx,
        y: this.cy + 60,
        radius: 60
      });
    }

    Editor.prototype.startDraggingStage = function(x, y, e) {
      this.dragStartX = this.stageX;
      this.dragStartY = this.stageY;
      return this.deselectAll();
    };

    Editor.prototype.stopDraggingStage = function() {};

    Editor.prototype.dragStage = function(dx, dy, x, y, e) {
      this.stageX = this.dragStartX + dx;
      this.stageY = this.dragStartY + dy;
      return this.redrawAll();
    };

    Editor.prototype.updateOutput = function() {
      var obj, planet, _fn, _i, _len, _ref,
        _this = this;
      obj = {
        title: "My Level",
        description: "Description",
        maxJump: 40,
        oxygen: 1000,
        planets: [],
        startingPosition: {
          x: this.player.x,
          y: this.player.y
        },
        goal: null
      };
      _ref = this.planets;
      _fn = function(planet) {
        if (planet.goal) {
          return obj.goal = planet.output();
        } else {
          return obj.planets.push(planet.output());
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        planet = _ref[_i];
        _fn(planet);
      }
      return this.output.innerHTML = JSON.stringify(obj);
    };

    Editor.prototype.redrawAll = function() {
      var planet, _fn, _i, _len, _ref,
        _this = this;
      _ref = this.planets;
      _fn = function(planet) {
        planet.stageX = _this.stageX;
        planet.stageY = _this.stageY;
        return planet.draw();
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        planet = _ref[_i];
        _fn(planet);
      }
      this.player.stageX = this.stageX;
      this.player.stageY = this.stageY;
      this.player.draw();
      this.player.toFront();
      return this.updateOutput();
    };

    Editor.prototype.deselectAll = function() {
      var planet, _fn, _i, _len, _ref,
        _this = this;
      _ref = this.planets;
      _fn = function(planet) {
        return planet.selected = false;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        planet = _ref[_i];
        _fn(planet);
      }
      this.player.selected = false;
      return this.redrawAll();
    };

    Editor.prototype.addMass = function(obj) {
      var key, p, val;
      p = new Planet(this, this.paper, this.cx, this.cy, 70);
      for (key in obj) {
        val = obj[key];
        console.log(("set " + key + " to " + val + " ") + obj[key]);
        p[key] = val;
      }
      this.planets.push(p);
      this.redrawAll();
      return p;
    };

    Editor.prototype.addPlanet = function(e) {
      this.addMass({
        x: this.cx - this.stageX,
        y: this.cy - this.stageY,
        radius: 70
      });
      return false;
    };

    Editor.prototype.addSun = function(e) {
      this.addMass({
        x: this.cx - this.stageX,
        y: this.cy - this.stageY,
        radius: 90
      }).makeSun();
      return false;
    };

    return Editor;

  })();

}).call(this);

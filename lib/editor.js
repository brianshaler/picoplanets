// Generated by CoffeeScript 1.3.1
(function() {
  var Planet, Player, addMass, deselectAll, dragStage, dragStartX, dragStartY, h, output, paper, planets, player, redrawAll, stageX, stageY, startDraggingStage, stopDraggingStage, updateOutput, w;

  Planet = (function() {

    Planet.name = 'Planet';

    Planet.prototype.planetColor = "rgb(210, 210, 210)";

    Planet.prototype.goalColor = "rgb(110, 200, 130)";

    Planet.prototype.sunColor = "rgb(255, 200, 50)";

    Planet.prototype.selectorColor = "#AAEEFF";

    Planet.prototype.selectorPadding = 8;

    Planet.prototype.hitAreaPadding = 10;

    function Planet(paper, x, y, radius) {
      this.paper = paper;
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.goal = false;
      this.type = "planet";
      this.selected = false;
      this.color = [200, 200, 200];
      this.stageX = 0;
      this.stageY = 0;
      this.planet = this.paper.circle(0, 0, this.radius);
      this.planet.attr("stroke", "none").attr("fill", this.planetColor);
      this.selector = this.paper.circle(0, 0, this.radius + this.selectorPadding);
      this.selector.attr("stroke", this.selectorColor).attr("stroke-width", 3);
      this.button = this.paper.circle(0, 0, this.radius + this.hitAreaPadding);
      this.button.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.moveHandler, this.startMoving, this.stopMoving, this, this, this);
      this.resizer = this.paper.circle(0, 0, 5);
      this.resizer.attr("stroke", this.selectorColor).attr("stroke-width", 3).attr("fill", "#000");
      this.resizeButton = this.paper.circle(0, 0, 10);
      this.resizeButton.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.resizeHandler, this.startResizing, this.stopResizing, this, this, this);
      this.draw();
    }

    Planet.prototype.makeSun = function() {
      this.planet.attr("fill", this.sunColor);
      this.type = "sun";
      return this;
    };

    Planet.prototype.makeGoal = function() {
      this.planet.attr("fill", this.goalColor);
      this.goal = true;
      return this;
    };

    Planet.prototype.draw = function() {
      var _x, _y;
      if (this.selected) {
        this.selector.show();
        this.resizer.show();
        this.resizeButton.show();
      } else {
        this.selector.hide();
        this.resizer.hide();
        this.resizeButton.hide();
      }
      _x = this.stageX + this.x;
      _y = this.stageY + this.y;
      this.planet.attr({
        cx: _x,
        cy: _y,
        r: this.radius
      });
      this.selector.attr({
        cx: _x,
        cy: _y,
        r: this.radius + this.selectorPadding
      });
      this.button.attr({
        cx: _x,
        cy: _y,
        r: this.radius + this.hitAreaPadding
      });
      this.resizer.attr({
        cx: _x + this.radius + this.selectorPadding,
        cy: _y
      });
      this.resizeButton.attr({
        cx: _x + this.radius + this.selectorPadding,
        cy: _y
      });
      return this;
    };

    Planet.prototype.startMoving = function(x, y, e) {
      if (!this.selected) {
        deselectAll();
        this.selected = true;
      }
      this.startX = this.planet.attr("cx") - this.stageX;
      this.startY = this.planet.attr("cy") - this.stageY;
      this.dragDistance = 0;
      this.startTime = (new Date()).getTime();
      return this.draw();
    };

    Planet.prototype.stopMoving = function() {
      /*
      		console.log "stopDragging()"
      */

      var dragTime;
      dragTime = this.startTime - (new Date()).getTime();
      if (this.dragDistance < 4 && dragTime < 1000) {
        return this.selected = true;
      }
    };

    Planet.prototype.moveHandler = function(dx, dy, x, y, e) {
      this.x = this.startX + dx;
      this.y = this.startY + dy;
      return this.draw();
    };

    Planet.prototype.startResizing = function() {
      /*
      		console.log "startDragging()"
      */

    };

    Planet.prototype.stopResizing = function() {
      /*
      		console.log "stopDragging()"
      */

    };

    Planet.prototype.resizeHandler = function(dx, dy, x, y, e) {
      var _x, _y;
      _x = this.planet.attr("cx");
      _y = this.planet.attr("cy");
      this.radius = (Math.sqrt((Math.pow(x - _x, 2)) + (Math.pow(y - _y, 2)))) - this.selectorPadding * 2;
      return this.draw();
    };

    Planet.prototype.output = function() {
      var obj;
      return obj = {
        type: this.type,
        x: this.x,
        y: this.y,
        radius: this.radius
      };
    };

    return Planet;

  })();

  Player = (function() {

    Player.name = 'Player';

    Player.prototype.img = "images/spiff/standing_left.png";

    Player.prototype.selectorColor = "#AAEEFF";

    Player.prototype.selectorRadius = 22;

    Player.prototype.iconWidth = 20;

    Player.prototype.iconHeight = 25;

    function Player(paper, x, y) {
      this.paper = paper;
      this.x = x;
      this.y = y;
      this.selected = false;
      this.stageX = 0;
      this.stageY = 0;
      this.player = this.paper.image(this.img, 0, 0, this.iconWidth, this.iconHeight);
      this.selector = this.paper.circle(0, 0, this.selectorRadius);
      this.selector.attr("stroke", this.selectorColor).attr("stroke-width", 3);
      this.selectorDot = this.paper.circle(0, 0, 3);
      this.selectorDot.attr("stroke", "none").attr("fill", this.selectorColor);
      this.button = this.paper.circle(0, 0, this.selectorRadius);
      this.button.attr("fill", "#0F0").attr("stroke", "none").attr("opacity", 0).drag(this.moveHandler, this.startMoving, this.stopMoving, this, this, this);
      this.draw();
    }

    Player.prototype.draw = function() {
      var _x, _y;
      if (this.selected) {
        this.selector.show();
        this.selectorDot.show();
      } else {
        this.selector.hide();
        this.selectorDot.hide();
      }
      _x = this.stageX + this.x;
      _y = this.stageY + this.y;
      this.player.attr({
        x: _x - this.iconWidth / 2,
        y: _y - this.iconHeight
      });
      this.selector.attr({
        cx: _x,
        cy: _y
      });
      this.selectorDot.attr({
        cx: _x,
        cy: _y
      });
      this.button.attr({
        cx: _x,
        cy: _y
      });
      return this;
    };

    Player.prototype.toFront = function() {
      this.player.toFront();
      this.selector.toFront();
      this.selectorDot.toFront();
      return this.button.toFront();
    };

    Player.prototype.startMoving = function(x, y, e) {
      if (!this.selected) {
        deselectAll();
        this.selected = true;
      }
      this.startX = this.selector.attr("cx") - this.stageX;
      this.startY = this.selector.attr("cy") - this.stageY;
      this.dragDistance = 0;
      this.startTime = (new Date()).getTime();
      return this.draw();
    };

    Player.prototype.stopMoving = function() {
      /*
      		console.log "stopDragging()"
      */

      var dragTime;
      dragTime = this.startTime - (new Date()).getTime();
      if (this.dragDistance < 4 && dragTime < 1000) {
        return this.selected = true;
      }
    };

    Player.prototype.moveHandler = function(dx, dy, x, y, e) {
      this.dragDistance += (Math.abs(dx)) + (Math.abs(dy));
      this.x = this.startX + dx;
      this.y = this.startY + dy;
      return this.draw();
    };

    return Player;

  })();

  w = 800;

  h = 480;

  output = document.getElementById("output");

  paper = new Raphael("canvas_div", w, h);

  stageX = 0;

  stageY = 0;

  dragStartX = 0;

  dragStartY = 0;

  startDraggingStage = function(x, y, e) {
    dragStartX = stageX;
    dragStartY = stageY;
    return deselectAll();
  };

  stopDraggingStage = function() {};

  dragStage = function(dx, dy, x, y, e) {
    stageX = dragStartX + dx;
    stageY = dragStartY + dy;
    return redrawAll();
  };

  paper.bg = paper.rect(0, 0, w, h);

  paper.bg.attr("fill", "#000");

  paper.bg.drag(dragStage, startDraggingStage, stopDraggingStage, this, this, this);

  planets = [];

  updateOutput = function() {
    var obj, planet, _fn, _i, _len,
      _this = this;
    obj = {
      title: "My Level",
      description: "Description",
      maxJump: 40,
      oxygen: 1000,
      planets: [],
      startingPosition: {
        x: player.x,
        y: player.y
      },
      goal: null
    };
    _fn = function(planet) {
      if (planet.goal) {
        return obj.goal = planet.output();
      } else {
        return obj.planets.push(planet.output());
      }
    };
    for (_i = 0, _len = planets.length; _i < _len; _i++) {
      planet = planets[_i];
      _fn(planet);
    }
    return output.innerHTML = JSON.stringify(obj);
  };

  redrawAll = function() {
    var planet, _fn, _i, _len,
      _this = this;
    _fn = function(planet) {
      planet.stageX = stageX;
      planet.stageY = stageY;
      return planet.draw();
    };
    for (_i = 0, _len = planets.length; _i < _len; _i++) {
      planet = planets[_i];
      _fn(planet);
    }
    player.stageX = stageX;
    player.stageY = stageY;
    player.draw();
    player.toFront();
    return updateOutput();
  };

  deselectAll = function() {
    var planet, _fn, _i, _len,
      _this = this;
    _fn = function(planet) {
      return planet.selected = false;
    };
    for (_i = 0, _len = planets.length; _i < _len; _i++) {
      planet = planets[_i];
      _fn(planet);
    }
    player.selected = false;
    return redrawAll();
  };

  addMass = function(obj) {
    var key, p, val;
    p = new Planet(paper, w / 2, h / 2, 70);
    for (key in obj) {
      val = obj[key];
      p[key] = val;
    }
    planets.push(p);
    redrawAll();
    return p;
  };

  this.addPlanet = function(e) {
    addMass({
      x: w / 2 - stageX,
      y: h / 2 - stageY,
      radius: 70
    });
    return false;
  };

  this.addSun = function(e) {
    addMass({
      x: w / 2 - stageX,
      y: h / 2 - stageY,
      radius: 90
    }).makeSun();
    return false;
  };

  player = new Player(paper, w / 2, h / 2);

  addMass({
    x: w / 2,
    y: h / 2 - 200,
    radius: 70
  }).makeGoal();

  addMass({
    x: w / 2,
    y: h / 2 + 60,
    radius: 60
  });

}).call(this);
